/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface BaseAdminUpgradeabilityProxyInterface extends Interface {
  functions: {
    admin: TypedFunctionDescription<{ encode([]: []): string }>;

    implementation: TypedFunctionDescription<{ encode([]: []): string }>;

    changeAdmin: TypedFunctionDescription<{
      encode([newAdmin]: [string]): string;
    }>;

    upgradeTo: TypedFunctionDescription<{
      encode([newImplementation]: [string]): string;
    }>;

    upgradeToAndCall: TypedFunctionDescription<{
      encode([newImplementation, data]: [string, Arrayish]): string;
    }>;
  };

  events: {
    AdminChanged: TypedEventDescription<{
      encodeTopics([previousAdmin, newAdmin]: [null, null]): string[];
    }>;

    Upgraded: TypedEventDescription<{
      encodeTopics([implementation]: [string | null]): string[];
    }>;
  };
}

export class BaseAdminUpgradeabilityProxy extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): BaseAdminUpgradeabilityProxy;
  attach(addressOrName: string): BaseAdminUpgradeabilityProxy;
  deployed(): Promise<BaseAdminUpgradeabilityProxy>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;
  once(
    event: EventFilter | string,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;
  removeAllListeners(
    eventName: EventFilter | string
  ): BaseAdminUpgradeabilityProxy;
  removeListener(
    eventName: any,
    listener: Listener
  ): BaseAdminUpgradeabilityProxy;

  interface: BaseAdminUpgradeabilityProxyInterface;

  functions: {
    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
     * @returns The address of the implementation.
     */
    implementation(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    changeAdmin(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    upgradeTo(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  /**
   * @returns The address of the proxy admin.
   */
  admin(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * @returns The address of the proxy admin.
   */
  "admin()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * @returns The address of the implementation.
   */
  implementation(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * @returns The address of the implementation.
   */
  "implementation()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
  changeAdmin(
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
  "changeAdmin(address)"(
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
  upgradeTo(
    newImplementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
  upgradeToAndCall(
    newImplementation: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimate: {
    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * @returns The address of the implementation.
     */
    implementation(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    changeAdmin(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    upgradeTo(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
