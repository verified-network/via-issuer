/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ViaCashInterface extends Interface {
  functions: {
    convert: TypedFunctionDescription<{
      encode([txId, result, rtype]: [Arrayish, Arrayish, Arrayish]): string;
    }>;

    requestAddToBalance: TypedFunctionDescription<{
      encode([tokens, sender]: [Arrayish, string]): string;
    }>;

    requestDeductFromBalance: TypedFunctionDescription<{
      encode([tokens, receiver]: [Arrayish, string]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([sender, receiver, tokens]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class ViaCash extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ViaCash;
  attach(addressOrName: string): ViaCash;
  deployed(): Promise<ViaCash>;

  on(event: EventFilter | string, listener: Listener): ViaCash;
  once(event: EventFilter | string, listener: Listener): ViaCash;
  addListener(eventName: EventFilter | string, listener: Listener): ViaCash;
  removeAllListeners(eventName: EventFilter | string): ViaCash;
  removeListener(eventName: any, listener: Listener): ViaCash;

  interface: ViaCashInterface;

  functions: {
    convert(
      txId: Arrayish,
      result: Arrayish,
      rtype: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "convert(bytes32,bytes16,bytes32)"(
      txId: Arrayish,
      result: Arrayish,
      rtype: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestAddToBalance(
      tokens: Arrayish,
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestAddToBalance(bytes16,address)"(
      tokens: Arrayish,
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestDeductFromBalance(
      tokens: Arrayish,
      receiver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestDeductFromBalance(bytes16,address)"(
      tokens: Arrayish,
      receiver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  convert(
    txId: Arrayish,
    result: Arrayish,
    rtype: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "convert(bytes32,bytes16,bytes32)"(
    txId: Arrayish,
    result: Arrayish,
    rtype: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestAddToBalance(
    tokens: Arrayish,
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestAddToBalance(bytes16,address)"(
    tokens: Arrayish,
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestDeductFromBalance(
    tokens: Arrayish,
    receiver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestDeductFromBalance(bytes16,address)"(
    tokens: Arrayish,
    receiver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    convert(
      txId: Arrayish,
      result: Arrayish,
      rtype: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "convert(bytes32,bytes16,bytes32)"(
      txId: Arrayish,
      result: Arrayish,
      rtype: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requestAddToBalance(
      tokens: Arrayish,
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requestAddToBalance(bytes16,address)"(
      tokens: Arrayish,
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requestDeductFromBalance(
      tokens: Arrayish,
      receiver: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requestDeductFromBalance(bytes16,address)"(
      tokens: Arrayish,
      receiver: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
