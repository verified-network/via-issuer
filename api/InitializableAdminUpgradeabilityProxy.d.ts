/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface InitializableAdminUpgradeabilityProxyInterface extends Interface {
  functions: {
    upgradeTo: TypedFunctionDescription<{
      encode([newImplementation]: [string]): string;
    }>;

    upgradeToAndCall: TypedFunctionDescription<{
      encode([newImplementation, data]: [string, Arrayish]): string;
    }>;

    implementation: TypedFunctionDescription<{ encode([]: []): string }>;

    changeAdmin: TypedFunctionDescription<{
      encode([newAdmin]: [string]): string;
    }>;

    admin: TypedFunctionDescription<{ encode([]: []): string }>;

    initialize: TypedFunctionDescription<{
      encode([_logic, _admin, _data]: [string, string, Arrayish]): string;
    }>;
  };

  events: {
    AdminChanged: TypedEventDescription<{
      encodeTopics([previousAdmin, newAdmin]: [null, null]): string[];
    }>;

    Upgraded: TypedEventDescription<{
      encodeTopics([implementation]: [string | null]): string[];
    }>;
  };
}

export class InitializableAdminUpgradeabilityProxy extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): InitializableAdminUpgradeabilityProxy;
  attach(addressOrName: string): InitializableAdminUpgradeabilityProxy;
  deployed(): Promise<InitializableAdminUpgradeabilityProxy>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): InitializableAdminUpgradeabilityProxy;
  once(
    event: EventFilter | string,
    listener: Listener
  ): InitializableAdminUpgradeabilityProxy;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): InitializableAdminUpgradeabilityProxy;
  removeAllListeners(
    eventName: EventFilter | string
  ): InitializableAdminUpgradeabilityProxy;
  removeListener(
    eventName: any,
    listener: Listener
  ): InitializableAdminUpgradeabilityProxy;

  interface: InitializableAdminUpgradeabilityProxyInterface;

  functions: {
    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    upgradeTo(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * @returns The address of the implementation.
     */
    implementation(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    changeAdmin(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
 * Contract initializer.
 * @param _admin Address of the proxy administrator.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic address of the initial implementation.
 */
    initialize(
      _logic: string,
      _admin: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Contract initializer.
 * @param _admin Address of the proxy administrator.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic address of the initial implementation.
 */
    "initialize(address,address,bytes)"(
      _logic: string,
      _admin: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * Contract initializer.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic Address of the initial implementation.
 */
    "initialize(address,bytes)"(
      _logic: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
  upgradeTo(
    newImplementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
  upgradeToAndCall(
    newImplementation: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * @returns The address of the implementation.
   */
  implementation(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * @returns The address of the implementation.
   */
  "implementation()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
  changeAdmin(
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
  "changeAdmin(address)"(
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * @returns The address of the proxy admin.
   */
  admin(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * @returns The address of the proxy admin.
   */
  "admin()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
 * Contract initializer.
 * @param _admin Address of the proxy administrator.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic address of the initial implementation.
 */
  initialize(
    _logic: string,
    _admin: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Contract initializer.
 * @param _admin Address of the proxy administrator.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic address of the initial implementation.
 */
  "initialize(address,address,bytes)"(
    _logic: string,
    _admin: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * Contract initializer.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic Address of the initial implementation.
 */
  "initialize(address,bytes)"(
    _logic: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimate: {
    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    upgradeTo(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Upgrade the backing implementation of the proxy.
 Only the admin can call this function.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    upgradeToAndCall(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Upgrade the backing implementation of the proxy and call a function
 on the new implementation.
 This is useful to initialize the proxied contract.
 * @param data Data to send as msg.data in the low level call.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 * @param newImplementation Address of the new implementation.
 */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * @returns The address of the implementation.
     */
    implementation(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    changeAdmin(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Changes the admin of the proxy.
 Only the current admin can call this function.
 * @param newAdmin Address to transfer proxy administration to.
 */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
 * Contract initializer.
 * @param _admin Address of the proxy administrator.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic address of the initial implementation.
 */
    initialize(
      _logic: string,
      _admin: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Contract initializer.
 * @param _admin Address of the proxy administrator.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic address of the initial implementation.
 */
    "initialize(address,address,bytes)"(
      _logic: string,
      _admin: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * Contract initializer.
 * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.
 It should include the signature and the parameters of the function to be called, as described in
 https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
 This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.
 * @param _logic Address of the initial implementation.
 */
    "initialize(address,bytes)"(
      _logic: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
