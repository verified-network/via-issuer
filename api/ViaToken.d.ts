/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ViaTokenInterface extends Interface {
  functions: {
    transferToken: TypedFunctionDescription<{
      encode([sender, receiver, tokens]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    reduceSupply: TypedFunctionDescription<{
      encode([amount]: [Arrayish]): string;
    }>;

    reduceBalance: TypedFunctionDescription<{
      encode([party, amount]: [string, Arrayish]): string;
    }>;

    addBalance: TypedFunctionDescription<{
      encode([party, amount]: [string, Arrayish]): string;
    }>;

    addTotalSupply: TypedFunctionDescription<{
      encode([amount]: [Arrayish]): string;
    }>;

    requestTransfer: TypedFunctionDescription<{
      encode([receiver, tokens]: [string, BigNumberish]): string;
    }>;

    requestIssue: TypedFunctionDescription<{
      encode([amount, payer, currency, cashContract]: [
        Arrayish,
        string,
        Arrayish,
        string
      ]): string;
    }>;
  };

  events: {};
}

export class ViaToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ViaToken;
  attach(addressOrName: string): ViaToken;
  deployed(): Promise<ViaToken>;

  on(event: EventFilter | string, listener: Listener): ViaToken;
  once(event: EventFilter | string, listener: Listener): ViaToken;
  addListener(eventName: EventFilter | string, listener: Listener): ViaToken;
  removeAllListeners(eventName: EventFilter | string): ViaToken;
  removeListener(eventName: any, listener: Listener): ViaToken;

  interface: ViaTokenInterface;

  functions: {
    transferToken(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferToken(address,address,uint256)"(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    reduceSupply(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "reduceSupply(bytes16)"(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    reduceBalance(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "reduceBalance(address,bytes16)"(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addBalance(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addBalance(address,bytes16)"(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addTotalSupply(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addTotalSupply(bytes16)"(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestTransfer(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestTransfer(address,uint256)"(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestIssue(
      amount: Arrayish,
      payer: string,
      currency: Arrayish,
      cashContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestIssue(bytes16,address,bytes32,address)"(
      amount: Arrayish,
      payer: string,
      currency: Arrayish,
      cashContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  transferToken(
    sender: string,
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferToken(address,address,uint256)"(
    sender: string,
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  reduceSupply(
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "reduceSupply(bytes16)"(
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  reduceBalance(
    party: string,
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "reduceBalance(address,bytes16)"(
    party: string,
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addBalance(
    party: string,
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addBalance(address,bytes16)"(
    party: string,
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addTotalSupply(
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addTotalSupply(bytes16)"(
    amount: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestTransfer(
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestTransfer(address,uint256)"(
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestIssue(
    amount: Arrayish,
    payer: string,
    currency: Arrayish,
    cashContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestIssue(bytes16,address,bytes32,address)"(
    amount: Arrayish,
    payer: string,
    currency: Arrayish,
    cashContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    transferToken(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferToken(address,address,uint256)"(
      sender: string,
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    reduceSupply(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "reduceSupply(bytes16)"(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    reduceBalance(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "reduceBalance(address,bytes16)"(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addBalance(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addBalance(address,bytes16)"(
      party: string,
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addTotalSupply(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addTotalSupply(bytes16)"(
      amount: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requestTransfer(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requestTransfer(address,uint256)"(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requestIssue(
      amount: Arrayish,
      payer: string,
      currency: Arrayish,
      cashContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requestIssue(bytes16,address,bytes32,address)"(
      amount: Arrayish,
      payer: string,
      currency: Arrayish,
      cashContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
