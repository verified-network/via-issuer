/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface OracleInterface extends Interface {
  functions: {
    request: TypedFunctionDescription<{
      encode([_currency, _ratetype, _tokenType, _tokenContract]: [
        Arrayish,
        Arrayish,
        Arrayish,
        string
      ]): string;
    }>;

    setCallbackId: TypedFunctionDescription<{
      encode([_queryId, _callbackId]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class Oracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Oracle;
  attach(addressOrName: string): Oracle;
  deployed(): Promise<Oracle>;

  on(event: EventFilter | string, listener: Listener): Oracle;
  once(event: EventFilter | string, listener: Listener): Oracle;
  addListener(eventName: EventFilter | string, listener: Listener): Oracle;
  removeAllListeners(eventName: EventFilter | string): Oracle;
  removeListener(eventName: any, listener: Listener): Oracle;

  interface: OracleInterface;

  functions: {
    request(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "request(bytes32,bytes32,bytes32,address)"(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCallbackId(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setCallbackId(bytes32,bytes32)"(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  request(
    _currency: Arrayish,
    _ratetype: Arrayish,
    _tokenType: Arrayish,
    _tokenContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "request(bytes32,bytes32,bytes32,address)"(
    _currency: Arrayish,
    _ratetype: Arrayish,
    _tokenType: Arrayish,
    _tokenContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCallbackId(
    _queryId: Arrayish,
    _callbackId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setCallbackId(bytes32,bytes32)"(
    _queryId: Arrayish,
    _callbackId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    request(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "request(bytes32,bytes32,bytes32,address)"(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setCallbackId(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setCallbackId(bytes32,bytes32)"(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
