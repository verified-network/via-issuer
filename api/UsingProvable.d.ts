/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface UsingProvableInterface extends Interface {
  functions: {
    __callback: TypedFunctionDescription<{
      encode([_myid, _result]: [Arrayish, string]): string;
    }>;
  };

  events: {};
}

export class UsingProvable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UsingProvable;
  attach(addressOrName: string): UsingProvable;
  deployed(): Promise<UsingProvable>;

  on(event: EventFilter | string, listener: Listener): UsingProvable;
  once(event: EventFilter | string, listener: Listener): UsingProvable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): UsingProvable;
  removeAllListeners(eventName: EventFilter | string): UsingProvable;
  removeListener(eventName: any, listener: Listener): UsingProvable;

  interface: UsingProvableInterface;

  functions: {
    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    __callback(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    "__callback(bytes32,string)"(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "__callback(bytes32,string,bytes)"(
      _myid: Arrayish,
      _result: string,
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
  __callback(
    _myid: Arrayish,
    _result: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
  "__callback(bytes32,string)"(
    _myid: Arrayish,
    _result: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "__callback(bytes32,string,bytes)"(
    _myid: Arrayish,
    _result: string,
    _proof: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    __callback(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    "__callback(bytes32,string)"(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "__callback(bytes32,string,bytes)"(
      _myid: Arrayish,
      _result: string,
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
