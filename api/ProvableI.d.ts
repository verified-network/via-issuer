/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ProvableIInterface extends Interface {
  functions: {
    cbAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    setProofType: TypedFunctionDescription<{
      encode([_proofType]: [Arrayish]): string;
    }>;

    setCustomGasPrice: TypedFunctionDescription<{
      encode([_gasPrice]: [BigNumberish]): string;
    }>;

    randomDS_getSessionPubKeyHash: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getPrice: TypedFunctionDescription<{
      encode([_datasource, _gasLimit]: [string, BigNumberish]): string;
    }>;

    queryN: TypedFunctionDescription<{
      encode([_timestamp, _datasource, _argN]: [
        BigNumberish,
        string,
        Arrayish
      ]): string;
    }>;

    query: TypedFunctionDescription<{
      encode([_timestamp, _datasource, _arg]: [
        BigNumberish,
        string,
        string
      ]): string;
    }>;

    query2: TypedFunctionDescription<{
      encode([_timestamp, _datasource, _arg1, _arg2]: [
        BigNumberish,
        string,
        string,
        string
      ]): string;
    }>;

    query_withGasLimit: TypedFunctionDescription<{
      encode([_timestamp, _datasource, _arg, _gasLimit]: [
        BigNumberish,
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    queryN_withGasLimit: TypedFunctionDescription<{
      encode([_timestamp, _datasource, _argN, _gasLimit]: [
        BigNumberish,
        string,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    query2_withGasLimit: TypedFunctionDescription<{
      encode([_timestamp, _datasource, _arg1, _arg2, _gasLimit]: [
        BigNumberish,
        string,
        string,
        string,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class ProvableI extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ProvableI;
  attach(addressOrName: string): ProvableI;
  deployed(): Promise<ProvableI>;

  on(event: EventFilter | string, listener: Listener): ProvableI;
  once(event: EventFilter | string, listener: Listener): ProvableI;
  addListener(eventName: EventFilter | string, listener: Listener): ProvableI;
  removeAllListeners(eventName: EventFilter | string): ProvableI;
  removeListener(eventName: any, listener: Listener): ProvableI;

  interface: ProvableIInterface;

  functions: {
    cbAddress(overrides?: TransactionOverrides): Promise<string>;

    "cbAddress()"(overrides?: TransactionOverrides): Promise<string>;

    setProofType(
      _proofType: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setProofType(bytes1)"(
      _proofType: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCustomGasPrice(
      _gasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setCustomGasPrice(uint256)"(
      _gasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    randomDS_getSessionPubKeyHash(
      overrides?: TransactionOverrides
    ): Promise<string>;

    "randomDS_getSessionPubKeyHash()"(
      overrides?: TransactionOverrides
    ): Promise<string>;

    getPrice(
      _datasource: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "getPrice(string,uint256)"(
      _datasource: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "getPrice(string)"(
      _datasource: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    queryN(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "queryN(uint256,string,bytes)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    query(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "query(uint256,string,string)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    query2(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "query2(uint256,string,string,string)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    query_withGasLimit(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "query_withGasLimit(uint256,string,string,uint256)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    queryN_withGasLimit(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "queryN_withGasLimit(uint256,string,bytes,uint256)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    query2_withGasLimit(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "query2_withGasLimit(uint256,string,string,string,uint256)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  cbAddress(overrides?: TransactionOverrides): Promise<string>;

  "cbAddress()"(overrides?: TransactionOverrides): Promise<string>;

  setProofType(
    _proofType: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setProofType(bytes1)"(
    _proofType: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCustomGasPrice(
    _gasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setCustomGasPrice(uint256)"(
    _gasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  randomDS_getSessionPubKeyHash(
    overrides?: TransactionOverrides
  ): Promise<string>;

  "randomDS_getSessionPubKeyHash()"(
    overrides?: TransactionOverrides
  ): Promise<string>;

  getPrice(
    _datasource: string,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "getPrice(string,uint256)"(
    _datasource: string,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "getPrice(string)"(
    _datasource: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  queryN(
    _timestamp: BigNumberish,
    _datasource: string,
    _argN: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "queryN(uint256,string,bytes)"(
    _timestamp: BigNumberish,
    _datasource: string,
    _argN: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  query(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "query(uint256,string,string)"(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  query2(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg1: string,
    _arg2: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "query2(uint256,string,string,string)"(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg1: string,
    _arg2: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  query_withGasLimit(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg: string,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "query_withGasLimit(uint256,string,string,uint256)"(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg: string,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  queryN_withGasLimit(
    _timestamp: BigNumberish,
    _datasource: string,
    _argN: Arrayish,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "queryN_withGasLimit(uint256,string,bytes,uint256)"(
    _timestamp: BigNumberish,
    _datasource: string,
    _argN: Arrayish,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  query2_withGasLimit(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg1: string,
    _arg2: string,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "query2_withGasLimit(uint256,string,string,string,uint256)"(
    _timestamp: BigNumberish,
    _datasource: string,
    _arg1: string,
    _arg2: string,
    _gasLimit: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    cbAddress(overrides?: TransactionOverrides): Promise<BigNumber>;

    "cbAddress()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    setProofType(
      _proofType: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setProofType(bytes1)"(
      _proofType: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setCustomGasPrice(
      _gasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setCustomGasPrice(uint256)"(
      _gasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    randomDS_getSessionPubKeyHash(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "randomDS_getSessionPubKeyHash()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPrice(
      _datasource: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPrice(string,uint256)"(
      _datasource: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPrice(string)"(
      _datasource: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    queryN(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "queryN(uint256,string,bytes)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    query(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "query(uint256,string,string)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    query2(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "query2(uint256,string,string,string)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    query_withGasLimit(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "query_withGasLimit(uint256,string,string,uint256)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    queryN_withGasLimit(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "queryN_withGasLimit(uint256,string,bytes,uint256)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _argN: Arrayish,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    query2_withGasLimit(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "query2_withGasLimit(uint256,string,string,string,uint256)"(
      _timestamp: BigNumberish,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
