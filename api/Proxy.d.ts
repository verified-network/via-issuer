/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ProxyInterface extends Interface {
  functions: {};

  events: {};
}

export class Proxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Proxy;
  attach(addressOrName: string): Proxy;
  deployed(): Promise<Proxy>;

  on(event: EventFilter | string, listener: Listener): Proxy;
  once(event: EventFilter | string, listener: Listener): Proxy;
  addListener(eventName: EventFilter | string, listener: Listener): Proxy;
  removeAllListeners(eventName: EventFilter | string): Proxy;
  removeListener(eventName: any, listener: Listener): Proxy;

  interface: ProxyInterface;

  functions: {};

  filters: {};

  estimate: {};
}
