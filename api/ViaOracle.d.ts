/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ViaOracleInterface extends Interface {
  functions: {
    pendingQueries: TypedFunctionDescription<{
      encode([]: [Arrayish]): string;
    }>;

    initialize: TypedFunctionDescription<{
      encode([_factory]: [string]): string;
    }>;

    __callback: TypedFunctionDescription<{
      encode([_myid, _result]: [Arrayish, string]): string;
    }>;

    request: TypedFunctionDescription<{
      encode([_currency, _ratetype, _tokenType, _tokenContract]: [
        Arrayish,
        Arrayish,
        Arrayish,
        string
      ]): string;
    }>;

    setCallbackId: TypedFunctionDescription<{
      encode([_queryId, _callbackId]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {
    LogNewProvableQuery: TypedEventDescription<{
      encodeTopics([description]: [null]): string[];
    }>;

    LogResult: TypedEventDescription<{
      encodeTopics([caller, myid, tokenType, rateType, result]: [
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class ViaOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ViaOracle;
  attach(addressOrName: string): ViaOracle;
  deployed(): Promise<ViaOracle>;

  on(event: EventFilter | string, listener: Listener): ViaOracle;
  once(event: EventFilter | string, listener: Listener): ViaOracle;
  addListener(eventName: EventFilter | string, listener: Listener): ViaOracle;
  removeAllListeners(eventName: EventFilter | string): ViaOracle;
  removeListener(eventName: any, listener: Listener): ViaOracle;

  interface: ViaOracleInterface;

  functions: {
    pendingQueries(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      caller: string;
      tokenType: string;
      rateType: string;
      callbackId: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    "pendingQueries(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      caller: string;
      tokenType: string;
      rateType: string;
      callbackId: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    initialize(
      _factory: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _factory: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    __callback(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    "__callback(bytes32,string)"(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "__callback(bytes32,string,bytes)"(
      _myid: Arrayish,
      _result: string,
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    request(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "request(bytes32,bytes32,bytes32,address)"(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCallbackId(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setCallbackId(bytes32,bytes32)"(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  pendingQueries(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    caller: string;
    tokenType: string;
    rateType: string;
    callbackId: string;
    0: string;
    1: string;
    2: string;
    3: string;
  }>;

  "pendingQueries(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    caller: string;
    tokenType: string;
    rateType: string;
    callbackId: string;
    0: string;
    1: string;
    2: string;
    3: string;
  }>;

  initialize(
    _factory: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _factory: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
  __callback(
    _myid: Arrayish,
    _result: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
  "__callback(bytes32,string)"(
    _myid: Arrayish,
    _result: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "__callback(bytes32,string,bytes)"(
    _myid: Arrayish,
    _result: string,
    _proof: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  request(
    _currency: Arrayish,
    _ratetype: Arrayish,
    _tokenType: Arrayish,
    _tokenContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "request(bytes32,bytes32,bytes32,address)"(
    _currency: Arrayish,
    _ratetype: Arrayish,
    _tokenType: Arrayish,
    _tokenContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCallbackId(
    _queryId: Arrayish,
    _callbackId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setCallbackId(bytes32,bytes32)"(
    _queryId: Arrayish,
    _callbackId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    LogNewProvableQuery(description: null): EventFilter;

    LogResult(
      caller: null,
      myid: null,
      tokenType: null,
      rateType: null,
      result: null
    ): EventFilter;
  };

  estimate: {
    pendingQueries(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "pendingQueries(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    initialize(
      _factory: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _factory: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    __callback(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
 * The following `__callback` functions are just placeholders ideally
     meant to be defined in child contract when proofs are used.
     The function bodies simply silence compiler warnings.
 */
    "__callback(bytes32,string)"(
      _myid: Arrayish,
      _result: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "__callback(bytes32,string,bytes)"(
      _myid: Arrayish,
      _result: string,
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    request(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "request(bytes32,bytes32,bytes32,address)"(
      _currency: Arrayish,
      _ratetype: Arrayish,
      _tokenType: Arrayish,
      _tokenContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setCallbackId(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setCallbackId(bytes32,bytes32)"(
      _queryId: Arrayish,
      _callbackId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
