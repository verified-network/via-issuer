/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from "..";
import { Stringutils } from "../Stringutils";

export class Stringutils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<Stringutils> {
    return super.deploy(overrides) as Promise<Stringutils>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): Stringutils {
    return super.attach(address) as Stringutils;
  }
  connect(signer: Signer): Stringutils__factory {
    return super.connect(signer) as Stringutils__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Stringutils {
    return new Contract(address, _abi, signerOrProvider) as Stringutils;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "s",
        type: "string",
      },
    ],
    name: "stringToUint",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "str",
        type: "string",
      },
      {
        name: "startIndex",
        type: "uint256",
      },
      {
        name: "endIndex",
        type: "uint256",
      },
    ],
    name: "substring",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "a",
        type: "string",
      },
      {
        name: "b",
        type: "string",
      },
    ],
    name: "append",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "source",
        type: "string",
      },
    ],
    name: "stringToBytes32",
    outputs: [
      {
        name: "result",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "_bytes32",
        type: "bytes32",
      },
    ],
    name: "bytes32ToString",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610765610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80631bd95155146100665780631dcd9b551461011c578063591c515f1461023a5780639201de5514610363578063cfb5192814610380575b600080fd5b61010a6004803603602081101561007c57600080fd5b810190602081018135600160201b81111561009657600080fd5b8201836020820111156100a857600080fd5b803590602001918460018302840111600160201b831117156100c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610424945050505050565b60408051918252519081900360200190f35b6101c56004803603606081101561013257600080fd5b810190602081018135600160201b81111561014c57600080fd5b82018360208201111561015e57600080fd5b803590602001918460018302840111600160201b8311171561017f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356104da565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ff5781810151838201526020016101e7565b50505050905090810190601f16801561022c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101c56004803603604081101561025057600080fd5b810190602081018135600160201b81111561026a57600080fd5b82018360208201111561027c57600080fd5b803590602001918460018302840111600160201b8311171561029d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156102ef57600080fd5b82018360208201111561030157600080fd5b803590602001918460018302840111600160201b8311171561032257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061056a945050505050565b6101c56004803603602081101561037957600080fd5b5035610625565b61010a6004803603602081101561039657600080fd5b810190602081018135600160201b8111156103b057600080fd5b8201836020820111156103c257600080fd5b803590602001918460018302840111600160201b831117156103e357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061071b945050505050565b600080828180805b83518110156104cd57603084828151811061044357fe5b602001015160f81c60f81b60f81c60ff161015801561047f5750603984828151811061046b57fe5b602001015160f81c60f81b60f81c60ff1611155b156104c057829150603084828151811061049557fe5b602001015160f81c60f81b60f81c60ff160383600a02019250828211156104bb57600194505b6104c5565b600194505b60010161042c565b509093505050505b919050565b60608084905060608484036040519080825280601f01601f19166020018201604052801561050f576020820181803883390190505b509050845b848110156105605782818151811061052857fe5b602001015160f81c60f81b828783038151811061054157fe5b60200101906001600160f81b031916908160001a905350600101610514565b5095945050505050565b606082826040516020018083805190602001908083835b602083106105a05780518252601f199092019160209182019101610581565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106105e85780518252601f1990920191602091820191016105c9565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b606060005b60208160ff161080156106585750828160ff166020811061064757fe5b1a60f81b6001600160f81b03191615155b156106655760010161062a565b60608160ff166040519080825280601f01601f191660200182016040528015610695576020820181803883390190505b509050600091505b60208260ff161080156106cb5750838260ff16602081106106ba57fe5b1a60f81b6001600160f81b03191615155b1561071457838260ff16602081106106df57fe5b1a60f81b818360ff16815181106106f257fe5b60200101906001600160f81b031916908160001a90535060019091019061069d565b9392505050565b805160009082906107305750600090506104d5565b5050602001519056fea165627a7a723058209976764b2923694a45a21bd994690ea0f4f07345ced237fd39dc0c4081ed0a980029";
