/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "ethers/providers";

import { ViaFactory } from "../ViaFactory";

export class ViaFactory__factory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ViaFactory {
    return new Contract(address, _abi, signerOrProvider) as ViaFactory;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "getTokenCount",
    outputs: [
      {
        name: "tokenCount",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "n",
        type: "uint256",
      },
    ],
    name: "getToken",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "viaAddress",
        type: "address",
      },
    ],
    name: "getName",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "viaAddress",
        type: "address",
      },
    ],
    name: "getType",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "viaAddress",
        type: "address",
      },
    ],
    name: "getNameAndType",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "symbol",
        type: "bytes32",
      },
    ],
    name: "getProduct",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "tokenType",
        type: "bytes32",
      },
      {
        name: "tokenName",
        type: "bytes32",
      },
    ],
    name: "getIssuer",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_target",
        type: "address",
      },
      {
        name: "tokenName",
        type: "bytes32",
      },
      {
        name: "tokenProduct",
        type: "bytes32",
      },
      {
        name: "tokenSymbol",
        type: "bytes32",
      },
    ],
    name: "createToken",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];
