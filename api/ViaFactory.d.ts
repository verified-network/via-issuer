/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ViaFactoryInterface extends Interface {
  functions: {
    getTokenCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getToken: TypedFunctionDescription<{ encode([n]: [BigNumberish]): string }>;

    getName: TypedFunctionDescription<{
      encode([viaAddress]: [string]): string;
    }>;

    getType: TypedFunctionDescription<{
      encode([viaAddress]: [string]): string;
    }>;

    getNameAndType: TypedFunctionDescription<{
      encode([viaAddress]: [string]): string;
    }>;

    getProduct: TypedFunctionDescription<{
      encode([symbol]: [Arrayish]): string;
    }>;

    getIssuer: TypedFunctionDescription<{
      encode([tokenType, tokenName]: [Arrayish, Arrayish]): string;
    }>;

    createToken: TypedFunctionDescription<{
      encode([_target, tokenName, tokenProduct, tokenSymbol]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class ViaFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ViaFactory;
  attach(addressOrName: string): ViaFactory;
  deployed(): Promise<ViaFactory>;

  on(event: EventFilter | string, listener: Listener): ViaFactory;
  once(event: EventFilter | string, listener: Listener): ViaFactory;
  addListener(eventName: EventFilter | string, listener: Listener): ViaFactory;
  removeAllListeners(eventName: EventFilter | string): ViaFactory;
  removeListener(eventName: any, listener: Listener): ViaFactory;

  interface: ViaFactoryInterface;

  functions: {
    getTokenCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getTokenCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getToken(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getToken(uint256)"(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getName(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getName(address)"(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getType(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getType(address)"(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getNameAndType(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "getNameAndType(address)"(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    getProduct(
      symbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getProduct(bytes32)"(
      symbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getIssuer(
      tokenType: Arrayish,
      tokenName: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getIssuer(bytes32,bytes32)"(
      tokenType: Arrayish,
      tokenName: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    createToken(
      _target: string,
      tokenName: Arrayish,
      tokenProduct: Arrayish,
      tokenSymbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createToken(address,bytes32,bytes32,bytes32)"(
      _target: string,
      tokenName: Arrayish,
      tokenProduct: Arrayish,
      tokenSymbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getTokenCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getTokenCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getToken(n: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  "getToken(uint256)"(
    n: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getName(
    viaAddress: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getName(address)"(
    viaAddress: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getType(
    viaAddress: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getType(address)"(
    viaAddress: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getNameAndType(
    viaAddress: string,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  "getNameAndType(address)"(
    viaAddress: string,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  getProduct(
    symbol: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getProduct(bytes32)"(
    symbol: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getIssuer(
    tokenType: Arrayish,
    tokenName: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getIssuer(bytes32,bytes32)"(
    tokenType: Arrayish,
    tokenName: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  createToken(
    _target: string,
    tokenName: Arrayish,
    tokenProduct: Arrayish,
    tokenSymbol: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createToken(address,bytes32,bytes32,bytes32)"(
    _target: string,
    tokenName: Arrayish,
    tokenProduct: Arrayish,
    tokenSymbol: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getTokenCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getTokenCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getToken(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getToken(uint256)"(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getName(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getName(address)"(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getType(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getType(address)"(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getNameAndType(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getNameAndType(address)"(
      viaAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getProduct(
      symbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getProduct(bytes32)"(
      symbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getIssuer(
      tokenType: Arrayish,
      tokenName: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getIssuer(bytes32,bytes32)"(
      tokenType: Arrayish,
      tokenName: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    createToken(
      _target: string,
      tokenName: Arrayish,
      tokenProduct: Arrayish,
      tokenSymbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createToken(address,bytes32,bytes32,bytes32)"(
      _target: string,
      tokenName: Arrayish,
      tokenProduct: Arrayish,
      tokenSymbol: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
