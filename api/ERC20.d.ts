/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ERC20Interface extends Interface {
  functions: {
    balances: TypedFunctionDescription<{ encode([]: [string]): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{
      encode([tokenOwner]: [string]): string;
    }>;

    transfer: TypedFunctionDescription<{
      encode([receiver, tokens]: [string, BigNumberish]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, tokens]: [string, BigNumberish]): string;
    }>;

    allowance: TypedFunctionDescription<{
      encode([tokenOwner, spender]: [string, string]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([owner, buyer, tokens]: [string, string, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([tokenOwner, spender, tokens]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, tokens]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class ERC20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ERC20;
  attach(addressOrName: string): ERC20;
  deployed(): Promise<ERC20>;

  on(event: EventFilter | string, listener: Listener): ERC20;
  once(event: EventFilter | string, listener: Listener): ERC20;
  addListener(eventName: EventFilter | string, listener: Listener): ERC20;
  removeAllListeners(eventName: EventFilter | string): ERC20;
  removeListener(eventName: any, listener: Listener): ERC20;

  interface: ERC20Interface;

  functions: {
    balances(arg0: string, overrides?: TransactionOverrides): Promise<string>;

    "balances(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    decimals(overrides?: TransactionOverrides): Promise<number>;

    "decimals()"(overrides?: TransactionOverrides): Promise<number>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    balanceOf(
      tokenOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      tokenOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transfer(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approve(
      spender: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    allowance(
      tokenOwner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      tokenOwner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferFrom(
      owner: string,
      buyer: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      owner: string,
      buyer: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  balances(arg0: string, overrides?: TransactionOverrides): Promise<string>;

  "balances(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  decimals(overrides?: TransactionOverrides): Promise<number>;

  "decimals()"(overrides?: TransactionOverrides): Promise<number>;

  totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  balanceOf(
    tokenOwner: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    tokenOwner: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  transfer(
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    receiver: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approve(
    spender: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  allowance(
    tokenOwner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    tokenOwner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  transferFrom(
    owner: string,
    buyer: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    owner: string,
    buyer: string,
    tokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      tokenOwner: string | null,
      spender: string | null,
      tokens: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, tokens: null): EventFilter;
  };

  estimate: {
    balances(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    balanceOf(
      tokenOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      tokenOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transfer(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      receiver: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    allowance(
      tokenOwner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      tokenOwner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferFrom(
      owner: string,
      buyer: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      owner: string,
      buyer: string,
      tokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
